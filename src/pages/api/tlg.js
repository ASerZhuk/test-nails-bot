import prisma from '@/app/libs/prismadb'
import bot from '@/pages/api/bot'

const webAppUrl = 'https://test-nails-bot.vercel.app/'

export default async function handler(req, res) {
	if (req.method === 'POST') {
		try {
			const { message } = req.body
			if (!message || !message.chat || !message.chat.id) {
				console.error('–û—à–∏–±–∫–∞: –ø–æ–ª–µ chat –∏–ª–∏ –µ–≥–æ id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏')
				res
					.status(400)
					.end('–û—à–∏–±–∫–∞: –ø–æ–ª–µ chat –∏–ª–∏ –µ–≥–æ id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏')
				return
			}
			const chat_Id = message.chat.id
			const chatId = chat_Id.toString()
			const text = message.text
			const username = message.chat.username
			const from_Id = message.from.id
			const userId = from_Id.toString()

			if (text === '/start') {
				await bot.sendMessage(
					chatId,
					'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏! \n\n –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å –∏ –≤–∞—à–µ–π —É—Å–ª—É–≥–µ! \n üëâ –¢–∞–∫ –∂–µ —Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏'
				)
				{
					/*let user = await prisma.user.findUnique({
					where: {
						userId: userId,
					},
				})*/
				}
				if (!user) {
					const masterUserExists = await prisma.user.findFirst({
						where: {
							isMaster: true,
						},
					})
					const userData = {
						firstName: message.chat.first_name,
						lastName: message.chat.last_name,
						username: username,
						chatId: chatId,
						userId: userId,
					}
					// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å isMaster: true, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
					if (!masterUserExists) {
						userData.isMaster = true
						// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Master
						await prisma.master.create({
							data: {
								firstName: message.chat.first_name,
								lastName: message.chat.last_name,
								username: username,
								chatId: chatId,
								userId: userId,
								image: '',
								startTime: '06:00',
								endTime: '06:00',
								interval: 0,
								slotTime: [],
								price: '',
							},
						})
					}
					user = await prisma.user.create({
						data: userData,
					})
				}

				let inlineKeyboard = []

				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å—å –∫–æ –º–Ω–µ"
				if (user.isMaster) {
					inlineKeyboard.push([
						{ text: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', web_app: { url: webAppUrl } },
						{
							text: '–ó–∞–ø–∏—Å—å –∫–æ –º–Ω–µ',
							web_app: { url: `${webAppUrl}/appointment_master` },
						},
					])
				} else {
					// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–∞—Å—Ç–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
					inlineKeyboard.push([
						{ text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è', web_app: { url: webAppUrl } },
						{
							text: '–ú–æ–∏ –∑–∞–ø–∏—Å–∏',
							web_app: { url: `${webAppUrl}/appointment_client` },
						},
					])
				}

				if (user.isMaster) {
					await bot.sendMessage(
						chatId,
						'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏! \n\n –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å –∏ –≤–∞—à–µ–π —É—Å–ª—É–≥–µ! \n üëâ –¢–∞–∫ –∂–µ —Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏',
						{
							reply_markup: {
								inline_keyboard: inlineKeyboard,
							},
						}
					)
				} else {
					await bot.sendMessage(
						chatId,
						'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏! \n\n –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É!',
						{
							reply_markup: {
								inline_keyboard: inlineKeyboard,
							},
						}
					)
				}
			}
			res.status(200).end()
		} catch (error) {
			console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error)
			res.status(500).json({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message })
		}
	} else {
		res.setHeader('Allow', ['POST'])
		res.status(405).end('Method Not Allowed')
	}
}
